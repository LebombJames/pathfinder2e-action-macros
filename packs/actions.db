{"name":"Crafting Actions","type":"script","author":"o86R8RtURj8zbgWh","img":"icons/skills/trades/woodcutting-logging-saw.webp","scope":"global","command":"if (actor) {\n  const whitelist = ['Craft', 'Identify Alchemy',];\n\n    const contents = await game.packs.filter(p => p.metadata.entity === 'Item' && p.metadata.name === \"actionspf2e\")[0].getDocuments();\n\n    let tobeadded = [];\n\n    for (let x of contents) {\n        if (whitelist.includes(x.name)) {\n            tobeadded.push(x.data)\n        }\n    }\n    tobeadded.sort(function(a, b) {\n        if (a.name < b.name) {\n            return -1;\n        }\n        if (a.name > b.name) {\n            return 1;\n        }\n        return 0;\n    })\n    await actor.createEmbeddedDocuments('Item', tobeadded)\n}","folder":null,"sort":0,"permission":{"default":0,"o86R8RtURj8zbgWh":3},"flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.BTWCjdXVGm57ngZ0"}},"_id":"5P0YbWJtGp3NHTDY"}
{"name":"Medicine Actions","type":"script","author":"o86R8RtURj8zbgWh","img":"systems/pf2e/icons/spells/heal.webp","scope":"global","command":"if (actor) {\n  const whitelist = ['Treat Disease', 'Treat Poison', 'Treat Wounds',];\n\n    const contents = await game.packs.filter(p => p.metadata.entity === 'Item' && p.metadata.name === \"actionspf2e\")[0].getDocuments();\n\n    let tobeadded = [];\n\n    for (let x of contents) {\n        if (whitelist.includes(x.name)) {\n            tobeadded.push(x.data)\n        }\n    }\n    tobeadded.sort(function(a, b) {\n        if (a.name < b.name) {\n            return -1;\n        }\n        if (a.name > b.name) {\n            return 1;\n        }\n        return 0;\n    })\n    await actor.createEmbeddedDocuments('Item', tobeadded)\n}","folder":null,"sort":0,"permission":{"default":0,"o86R8RtURj8zbgWh":3},"flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.l1K70jq02OflErde"}},"_id":"OjqkO7P9BQaL2Q3i"}
{"name":"Deception Actions","type":"script","author":"o86R8RtURj8zbgWh","img":"systems/pf2e/icons/spells/charming-words.webp","scope":"global","command":"if (actor) {\n  const whitelist = ['Feint',];\n\n    const contents = await game.packs.filter(p => p.metadata.entity === 'Item' && p.metadata.name === \"actionspf2e\")[0].getDocuments();\n\n    let tobeadded = [];\n\n    for (let x of contents) {\n        if (whitelist.includes(x.name)) {\n            tobeadded.push(x.data)\n        }\n    }\n    tobeadded.sort(function(a, b) {\n        if (a.name < b.name) {\n            return -1;\n        }\n        if (a.name > b.name) {\n            return 1;\n        }\n        return 0;\n    })\n    await actor.createEmbeddedDocuments('Item', tobeadded)\n}","folder":null,"sort":0,"permission":{"default":0,"o86R8RtURj8zbgWh":3},"flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.c9VduiKKCqZ8p0Oj"}},"_id":"ZMTisU4YJDyyAlnA"}
{"name":"Athletics Actions","type":"script","author":"o86R8RtURj8zbgWh","img":"systems/pf2e/icons/spells/athletic-rush.webp","scope":"global","command":"if (actor) {\n  const whitelist = ['Disarm',];\n\n    const contents = await game.packs.filter(p => p.metadata.entity === 'Item' && p.metadata.name === \"actionspf2e\")[0].getDocuments();\n\n    let tobeadded = [];\n\n    for (let x of contents) {\n        if (whitelist.includes(x.name)) {\n            tobeadded.push(x.data)\n        }\n    }\n    tobeadded.sort(function(a, b) {\n        if (a.name < b.name) {\n            return -1;\n        }\n        if (a.name > b.name) {\n            return 1;\n        }\n        return 0;\n    })\n    await actor.createEmbeddedDocuments('Item', tobeadded)\n}","folder":null,"sort":0,"permission":{"default":0,"o86R8RtURj8zbgWh":3},"flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.AxuDCxkeWrNyXORD"}},"_id":"Zju2cXkLgTJpyBn3"}
{"name":"Spell Actions","type":"script","author":"o86R8RtURj8zbgWh","img":"icons/magic/light/hand-sparks-glow-yellow.webp","scope":"global","command":"if (actor) {\n  const whitelist = ['Cast a Spell', 'Learn a Spell', 'Repeat a Spell', 'Sustain a Spell',];\n\n    const contents = await game.packs.filter(p => p.metadata.entity === 'Item' && p.metadata.name === \"actionspf2e\")[0].getDocuments();\n\n    let tobeadded = [];\n\n    for (let x of contents) {\n        if (whitelist.includes(x.name)) {\n            tobeadded.push(x.data)\n        }\n    }\n    tobeadded.sort(function(a, b) {\n        if (a.name < b.name) {\n            return -1;\n        }\n        if (a.name > b.name) {\n            return 1;\n        }\n        return 0;\n    })\n    await actor.createEmbeddedDocuments('Item', tobeadded)\n}","folder":null,"sort":0,"permission":{"default":0,"o86R8RtURj8zbgWh":3},"flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.2IJhIJzV3bJwxPWp"}},"_id":"gc50fYvGpUkJk4tX"}
{"name":"Acrobatics Actions","type":"script","author":"o86R8RtURj8zbgWh","img":"icons/skills/movement/feet-winged-sandals-tan.webp","scope":"global","command":"if (actor) {\n  const whitelist = ['Maneuver in Flight', 'Squeeze',];\nconst contents = await game.packs.filter(p => p.metadata.entity === 'Item' && p.metadata.name === \"actionspf2e\")[0].getDocuments();\n\n    let tobeadded = [];\n\n    for (let x of contents) {\n        if (whitelist.includes(x.name)) {\n            tobeadded.push(x.data)\n        }\n    }\n    tobeadded.sort(function(a, b) {\n        if (a.name < b.name) {\n            return -1;\n        }\n        if (a.name > b.name) {\n            return 1;\n        }\n        return 0;\n    })\n    await actor.createEmbeddedDocuments('Item', tobeadded)\n}","folder":null,"sort":0,"permission":{"default":0,"o86R8RtURj8zbgWh":3},"flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.jqcpKt8rQc3DHfmP"}},"_id":"idSVdRapBh94CMVz"}
{"name":"Society Actions","type":"script","author":"o86R8RtURj8zbgWh","img":"icons/skills/trades/academics-merchant-scribe.webp","scope":"global","command":"if (actor) {\n  const whitelist = ['Create Forgery',];\n\n    const contents = await game.packs.filter(p => p.metadata.entity === 'Item' && p.metadata.name === \"actionspf2e\")[0].getDocuments();\n\n    let tobeadded = [];\n\n    for (let x of contents) {\n        if (whitelist.includes(x.name)) {\n            tobeadded.push(x.data)\n        }\n    }\n    tobeadded.sort(function(a, b) {\n        if (a.name < b.name) {\n            return -1;\n        }\n        if (a.name > b.name) {\n            return 1;\n        }\n        return 0;\n    })\n    await actor.createEmbeddedDocuments('Item', tobeadded)\n}","folder":null,"sort":0,"permission":{"default":0,"o86R8RtURj8zbgWh":3},"flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.r5f258B470lG9zTU"}},"_id":"o5tRBBKNkcgNGhGA"}
{"name":"Basic Actions (incl. exploration & downtime)","type":"script","author":"o86R8RtURj8zbgWh","img":"systems/pf2e/icons/actions/OneAction.webp","scope":"global","command":"if (actor) {\n    const whitelist = ['Administer First Aid', 'Aid', 'Avert Gaze', 'Balance', 'Burrow', 'Climb', 'Command an Animal', 'Conceal an Object', 'Crawl', 'Create a Diversion', 'Decipher Writing', 'Delay', 'Demoralize', 'Dismiss', 'Drop Prone', 'Escape', 'Force Open', 'Grab an Edge', 'Grapple', 'Hide', 'High Jump', 'Interact', 'Leap', 'Lie', 'Long Jump', 'Mount', 'Palm an Object', 'Perform', 'Point Out', 'Raise a Shield', 'Ready', 'Recall Knowledge (Arcana)', 'Recall Knowledge (Crafting)', 'Recall Knowledge (Lore)', 'Recall Knowledge (Medicine)', 'Recall Knowledge (Nature)', 'Recall Knowledge (Occultism)', 'Recall Knowledge (Religion)', 'Recall Knowledge (Society)', 'Release', 'Request', 'Seek', 'Sense Motive', 'Shove', 'Sneak', 'Stand', 'Steal', 'Step', 'Stride', 'Strike', 'Sustain an Activation', 'Swim', 'Take Cover', 'Trip', 'Tumble Through', 'Affix a Talisman', 'Avoid Notice', 'Coerce', 'Defend', 'Follow the Expert', 'Gather Information', 'Hustle', 'Identify Magic', 'Impersonate', 'Investigate', 'Make an Impression', 'Refocus', 'Repair', 'Scout', 'Earn Income', 'Long Term Rest', 'Retraining', 'Subsist', 'Search', ];\n\n    const contents = await game.packs.filter(p => p.metadata.entity === 'Item' && p.metadata.name === \"actionspf2e\")[0].getDocuments();\n\n    let tobeadded = [];\n\n    for (let x of contents) {\n        if (whitelist.includes(x.name)) {\n            tobeadded.push(x.data)\n        }\n    }\n    tobeadded.sort(function(a, b) {\n        if (a.name < b.name) {\n            return -1;\n        }\n        if (a.name > b.name) {\n            return 1;\n        }\n        return 0;\n    })\n    await actor.createEmbeddedDocuments('Item', tobeadded)\n}","folder":null,"sort":0,"permission":{"default":0,"o86R8RtURj8zbgWh":3},"flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.M9Z1Ma4PJYb4E15h"}},"_id":"o6CM3n3wpgzQhvw8"}
{"name":"Arcana Actions","type":"script","author":"o86R8RtURj8zbgWh","img":"systems/pf2e/icons/features/classes/archwizards-spellcraft.webp","scope":"global","command":"if (actor) {\n  const whitelist = ['Borrow an Arcane Spell', 'Identify Magic',];\n  \n    const contents = await game.packs.filter(p => p.metadata.entity === 'Item' && p.metadata.name === \"actionspf2e\")[0].getDocuments();\n\n    let tobeadded = [];\n\n    for (let x of contents) {\n        if (whitelist.includes(x.name)) {\n            tobeadded.push(x.data)\n        }\n    }\n    tobeadded.sort(function(a, b) {\n        if (a.name < b.name) {\n            return -1;\n        }\n        if (a.name > b.name) {\n            return 1;\n        }\n        return 0;\n    })\n    await actor.createEmbeddedDocuments('Item', tobeadded)\n}","folder":null,"sort":0,"permission":{"default":0,"o86R8RtURj8zbgWh":3},"flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.QqlpTZGHoYKKrwFI"}},"_id":"svKjmu4Exwfr2FOa"}
{"name":"Thievery Actions","type":"script","author":"o86R8RtURj8zbgWh","img":"icons/skills/social/theft-pickpocket-bribery-brown.webp","scope":"global","command":"if (actor) {\n  const whitelist = ['Disable Device', 'Pick a Lock',];\n\n    const contents = await game.packs.filter(p => p.metadata.entity === 'Item' && p.metadata.name === \"actionspf2e\")[0].getDocuments();\n\n    let tobeadded = [];\n\n    for (let x of contents) {\n        if (whitelist.includes(x.name)) {\n            tobeadded.push(x.data)\n        }\n    }\n    tobeadded.sort(function(a, b) {\n        if (a.name < b.name) {\n            return -1;\n        }\n        if (a.name > b.name) {\n            return 1;\n        }\n        return 0;\n    })\n    await actor.createEmbeddedDocuments('Item', tobeadded)\n}","folder":null,"sort":0,"permission":{"default":0,"o86R8RtURj8zbgWh":3},"flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.c7UvmHpXVtOSFsXf"}},"_id":"tIyyQWDjKn8PnS4r"}
{"name":"Survival Actions","type":"script","author":"o86R8RtURj8zbgWh","img":"icons/tools/navigation/compass-brass-blue-red.webp","scope":"global","command":"if (actor) {\n  const whitelist = ['Cover Tracks', 'Track',];\n\n    const contents = await game.packs.filter(p => p.metadata.entity === 'Item' && p.metadata.name === \"actionspf2e\")[0].getDocuments();\n\n    let tobeadded = [];\n\n    for (let x of contents) {\n        if (whitelist.includes(x.name)) {\n            tobeadded.push(x.data)\n        }\n    }\n    tobeadded.sort(function(a, b) {\n        if (a.name < b.name) {\n            return -1;\n        }\n        if (a.name > b.name) {\n            return 1;\n        }\n        return 0;\n    })\n    await actor.createEmbeddedDocuments('Item', tobeadded)\n}","folder":null,"sort":0,"permission":{"default":0,"o86R8RtURj8zbgWh":3},"flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.Tg7RN0FISyigxaMi"}},"_id":"uZtb7RMutdL4d7B9"}
{"$$deleted":true,"_id":"idSVdRapBh94CMVz"}
{"$$deleted":true,"_id":"svKjmu4Exwfr2FOa"}
{"$$deleted":true,"_id":"Zju2cXkLgTJpyBn3"}
{"$$deleted":true,"_id":"o6CM3n3wpgzQhvw8"}
{"$$deleted":true,"_id":"5P0YbWJtGp3NHTDY"}
{"$$deleted":true,"_id":"ZMTisU4YJDyyAlnA"}
{"$$deleted":true,"_id":"OjqkO7P9BQaL2Q3i"}
{"$$deleted":true,"_id":"o5tRBBKNkcgNGhGA"}
{"$$deleted":true,"_id":"gc50fYvGpUkJk4tX"}
{"$$deleted":true,"_id":"uZtb7RMutdL4d7B9"}
{"$$deleted":true,"_id":"tIyyQWDjKn8PnS4r"}
{"name":"Add Actions Macro","type":"script","author":"o86R8RtURj8zbgWh","img":"systems/pf2e/icons/actions/OneAction.webp","scope":"global","command":"if (!actor) {\nui.notifications.error('You must have an token selected.')    \nreturn\n\n}\nlet applyChanges = false\nnew Dialog({\n    title: \"Add Actions to Sheet\",\n    content: `\n    <form>\n<body> Tick the options you would like to add to your sheet. Actions already on your sheet will be skipped. Skills without an option here have no skill actions.</body>\n<hr>\n<div class=\"form-group\">\n        <label>Basic Actions</label>\n        <input type=\"checkbox\" id=\"basic\" name=\"basic\">\n       </div>\n<hr>\n<body>Skill Actions</body>\n      <div class=\"form-group\">\n        <label>Acrobatics</label>\n        <input type=\"checkbox\" id=\"acrobatics\" name=\"acrobatics\">\n       </div>\n<div class=\"form-group\">\n        <label>Arcana</label>\n        <input type=\"checkbox\" id=\"arcana\" name=\"arcana\">\n       </div>\n<div class=\"form-group\">\n        <label>Athletics</label>\n        <input type=\"checkbox\" id=\"athletics\" name=\"athletics\">\n       </div>\n<div class=\"form-group\">\n        <label>Crafting</label>\n        <input type=\"checkbox\" id=\"crafting\" name=\"crafting\">\n       </div>\n<div class=\"form-group\">\n        <label>Deception</label>\n        <input type=\"checkbox\" id=\"deception\" name=\"deception\">\n       </div>\n<div class=\"form-group\">\n        <label>Medicine</label>\n        <input type=\"checkbox\" id=\"medicine\" name=\"medicine\">\n       </div>\n<div class=\"form-group\">\n        <label>Nature*</label>\n        <input type=\"checkbox\" id=\"nature\" name=\"nature\">\n       </div>\n<div class=\"form-group\">\n        <label>Occultism*</label>\n        <input type=\"checkbox\" id=\"occultism\" name=\"occultism\">\n       </div>\n<div class=\"form-group\">\n        <label>Religion*</label>\n        <input type=\"checkbox\" id=\"religion\" name=\"religion\">\n       </div>\n<div class=\"form-group\">\n        <label>Society</label>\n        <input type=\"checkbox\" id=\"society\" name=\"society\">\n       </div>\n<div class=\"form-group\">\n        <label>Survival</label>\n        <input type=\"checkbox\" id=\"survival\" name=\"survival\">\n       </div>\n<div class=\"form-group\">\n        <label>Thievery</label>\n        <input type=\"checkbox\" id=\"thievery\" name=\"thievery\">\n       </div>\n<body> *Contain only duplicate actions, may be skipped entirely depending on your other skills. </body>\n<hr>\n<body> Additional Miscellaneous Actions </body>\n <div class=\"form-group\">\n        <label>Has spellcasting?</label>\n        <input type=\"checkbox\" id=\"spells\" name=\"spells\">\n       </div>\n<div class=\"form-group\">\n        <label>Has a fly speed?</label>\n        <input type=\"checkbox\" id=\"fly\" name=\"fly\">\n       </div>\n<div class=\"form-group\">\n        <label>Has a burrow speed?</label>\n        <input type=\"checkbox\" id=\"burrow\" name=\"burrow\">\n       </div>\n    `,\n    buttons: {\n        yes: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: `Add Actions`,\n            callback: () => applyChanges = true\n\n        },\n\n    },\n    close: async html => {\n        if (applyChanges) {\n            let toBeAdded = []\n            if (html.find('[name=\"basic\"]')[0].checked) {\n                const basicActions = ['Administer First Aid', 'Aid', 'Avert Gaze', 'Balance', 'Climb', 'Command an Animal', 'Conceal an Object', 'Crawl', 'Create a Diversion', 'Delay', 'Demoralize', 'Dismiss', 'Drop Prone', 'Escape', 'Force Open', 'Grab an Edge', 'Grapple', 'Hide', 'High Jump', 'Interact', 'Leap', 'Lie', 'Long Jump', 'Mount', 'Palm an Object', 'Perform', 'Point Out', 'Raise a Shield', 'Ready', 'Recall Knowledge (Arcana)', 'Recall Knowledge (Crafting)', 'Recall Knowledge (Lore)', 'Recall Knowledge (Medicine)', 'Recall Knowledge (Nature)', 'Recall Knowledge (Occultism)', 'Recall Knowledge (Religion)', 'Recall Knowledge (Society)', 'Release', 'Request', 'Seek', 'Sense Motive', 'Shove', 'Sneak', 'Stand', 'Steal', 'Step', 'Stride', 'Strike', 'Sustain an Activation', 'Swim', 'Take Cover', 'Trip', 'Tumble Through', 'Affix a Talisman', 'Avoid Notice', 'Coerce', 'Defend', 'Follow the Expert', 'Gather Information', 'Hustle', 'Identify Magic', 'Impersonate', 'Investigate', 'Make an Impression', 'Refocus', 'Repair', 'Scout', 'Earn Income', 'Long Term Rest', 'Retraining', 'Subsist', 'Search', ]\n                toBeAdded = toBeAdded.concat(basicActions)\n            }\n\n            if (html.find('[name=\"acrobatics\"]')[0].checked) {\n                const acrobaticsActions = ['Maneuver in Flight', 'Squeeze', ]\n                toBeAdded = toBeAdded.concat(acrobaticsActions)\n            }\n\n            if (html.find('[name=\"arcana\"]')[0].checked) {\n                const arcanaActions = ['Borrow an Arcane Spell', ]\n                toBeAdded = toBeAdded.concat(arcanaActions)\n            }\n\n            if (html.find('[name=\"athletics\"]')[0].checked) {\n                const athleticsActions = ['Disarm', ]\n                toBeAdded = toBeAdded.concat(athleticsActions)\n            }\n\n            if (html.find('[name=\"crafting\"]')[0].checked) {\n                const craftingActions = ['Craft', 'Identify Alchemy', ]\n                toBeAdded = toBeAdded.concat(craftingActions)\n            }\n\n            if (html.find('[name=\"deception\"]')[0].checked) {\n                const deceptionActions = ['Feint', ]\n                toBeAdded = toBeAdded.concat(deceptionActions)\n            }\n\n            if (html.find('[name=\"medicine\"]')[0].checked) {\n                const medicineActions = ['Treat Disease', 'Treat Poison', 'Treat Wounds', ]\n                toBeAdded = toBeAdded.concat(medicineActions)\n            }\n\n            if (html.find('[name=\"society\"]')[0].checked) {\n                const societyActions = ['Create Forgery', ]\n                toBeAdded = toBeAdded.concat(societyActions)\n            }\n\n            if (html.find('[name=\"survival\"]')[0].checked) {\n                const survivalActions = ['Cover Tracks', 'Track', ]\n                toBeAdded = toBeAdded.concat(survivalActions)\n            }\n\n            if (html.find('[name=\"thievery\"]')[0].checked) {\n                const thieveryActions = ['Disable Device', 'Pick a Lock', ]\n                toBeAdded = toBeAdded.concat(thieveryActions)\n            }\n\n            if (html.find('[name=\"spells\"]')[0].checked) {\n                const spellActions = ['Cast a Spell', 'Learn a Spell', 'Repeat a Spell', 'Sustain a Spell', ]\n                toBeAdded = toBeAdded.concat(spellActions)\n            }\n\n            if (html.find('[name=\"fly\"]')[0].checked) {\n                const flyActions = ['Fly', ]\n                toBeAdded = toBeAdded.concat(flyActions)\n            }\n\n            if (html.find('[name=\"burrow\"]')[0].checked) {\n                const burrowActions = ['Burrow', ]\n                toBeAdded = toBeAdded.concat(burrowActions)\n            }\n\n            if ((html.find('[name=\"arcana\"]')[0].checked) || (html.find('[name=\"occultism\"]')[0].checked) || (html.find('[name=\"religion\"]')[0].checked) || (html.find('[name=\"nature\"]')[0].checked)) {\n                const identifyActions = ['Identify Magic', ]\n                toBeAdded = toBeAdded.concat(identifyActions)\n            }\n\n            if ((html.find('[name=\"arcana\"]')[0].checked) || (html.find('[name=\"occultism\"]')[0].checked) || (html.find('[name=\"religion\"]')[0].checked) || (html.find('[name=\"society\"]')[0].checked)) {\n                const decipherActions = ['Decipher Writing', ]\n                toBeAdded = toBeAdded.concat(decipherActions)\n            }\n\n            const packs = game.packs.filter(p => p.metadata.entity === \"Item\" && p.metadata.name === \"actionspf2e\").map(p => p.collection);\n\n            let updates = [];\n            for (let name of toBeAdded) {\n                if (!!token.actor.items.getName(name)) continue;\n                let item = await findItemInCompendium({\n                    keys: packs,\n                    name\n                });\n                if (!item) continue;\n                updates.push(item.data);\n            }\n\n            await token.actor.createEmbeddedDocuments(\"Item\", updates);\n\nui.notifications.info(`Added ${updates.length} action(s).`)\n\n            async function findItemInCompendium({\n                keys = [],\n                name,\n                id\n            } = {}) {\n                keys = keys instanceof Array ? keys : [keys];\n\n                for (let key of keys) {\n                    let pack = game.packs.get(key);\n                    let index = pack.index ?? (await pack.getIndex());\n                    let itemID = id ?? index.find(i => i.name.toLowerCase() === name.toLowerCase())?._id;\n                    if (itemID)\n                        return await pack.getDocument(itemID);\n                }\n            }\n        }\n    }\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"o86R8RtURj8zbgWh":3},"flags":{"core":{"sourceId":"Macro.PXS4Dbq94QQOQwkJ"}},"_id":"RKWG19NB8n3wf0ce"}
